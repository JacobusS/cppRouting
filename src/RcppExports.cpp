// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// Astar
Rcpp::NumericVector Astar(std::vector<int> dep, std::vector<int> arr, std::vector<int> gfrom, std::vector<int> gto, std::vector<float> gw, int NbNodes, std::vector<float> lat, std::vector<float> lon, float k);
RcppExport SEXP _cppRouting_Astar(SEXP depSEXP, SEXP arrSEXP, SEXP gfromSEXP, SEXP gtoSEXP, SEXP gwSEXP, SEXP NbNodesSEXP, SEXP latSEXP, SEXP lonSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type dep(depSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arr(arrSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type gfrom(gfromSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type gto(gtoSEXP);
    Rcpp::traits::input_parameter< std::vector<float> >::type gw(gwSEXP);
    Rcpp::traits::input_parameter< int >::type NbNodes(NbNodesSEXP);
    Rcpp::traits::input_parameter< std::vector<float> >::type lat(latSEXP);
    Rcpp::traits::input_parameter< std::vector<float> >::type lon(lonSEXP);
    Rcpp::traits::input_parameter< float >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(Astar(dep, arr, gfrom, gto, gw, NbNodes, lat, lon, k));
    return rcpp_result_gen;
END_RCPP
}
// Astar_paths
Rcpp::List Astar_paths(std::vector<int> gfrom, std::vector<int> gto, std::vector<float> gw, int NbNodes, std::vector<int> dep, std::vector<int> arr, std::vector<float> lat, std::vector<float> lon, float k, std::vector<std::string> dict);
RcppExport SEXP _cppRouting_Astar_paths(SEXP gfromSEXP, SEXP gtoSEXP, SEXP gwSEXP, SEXP NbNodesSEXP, SEXP depSEXP, SEXP arrSEXP, SEXP latSEXP, SEXP lonSEXP, SEXP kSEXP, SEXP dictSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type gfrom(gfromSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type gto(gtoSEXP);
    Rcpp::traits::input_parameter< std::vector<float> >::type gw(gwSEXP);
    Rcpp::traits::input_parameter< int >::type NbNodes(NbNodesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type dep(depSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arr(arrSEXP);
    Rcpp::traits::input_parameter< std::vector<float> >::type lat(latSEXP);
    Rcpp::traits::input_parameter< std::vector<float> >::type lon(lonSEXP);
    Rcpp::traits::input_parameter< float >::type k(kSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dict(dictSEXP);
    rcpp_result_gen = Rcpp::wrap(Astar_paths(gfrom, gto, gw, NbNodes, dep, arr, lat, lon, k, dict));
    return rcpp_result_gen;
END_RCPP
}
// Dijkstra_early_stop
Rcpp::NumericVector Dijkstra_early_stop(std::vector<int> dep, std::vector<int> arr, std::vector<int> gfrom, std::vector<int> gto, std::vector<float> gw, int NbNodes);
RcppExport SEXP _cppRouting_Dijkstra_early_stop(SEXP depSEXP, SEXP arrSEXP, SEXP gfromSEXP, SEXP gtoSEXP, SEXP gwSEXP, SEXP NbNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type dep(depSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arr(arrSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type gfrom(gfromSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type gto(gtoSEXP);
    Rcpp::traits::input_parameter< std::vector<float> >::type gw(gwSEXP);
    Rcpp::traits::input_parameter< int >::type NbNodes(NbNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(Dijkstra_early_stop(dep, arr, gfrom, gto, gw, NbNodes));
    return rcpp_result_gen;
END_RCPP
}
// Dijkstra_early_stop_path
Rcpp::List Dijkstra_early_stop_path(std::vector<int> gfrom, std::vector<int> gto, std::vector<float> gw, int NbNodes, std::vector<int> dep, std::vector<int> arr, std::vector<std::string> dict);
RcppExport SEXP _cppRouting_Dijkstra_early_stop_path(SEXP gfromSEXP, SEXP gtoSEXP, SEXP gwSEXP, SEXP NbNodesSEXP, SEXP depSEXP, SEXP arrSEXP, SEXP dictSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type gfrom(gfromSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type gto(gtoSEXP);
    Rcpp::traits::input_parameter< std::vector<float> >::type gw(gwSEXP);
    Rcpp::traits::input_parameter< int >::type NbNodes(NbNodesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type dep(depSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arr(arrSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dict(dictSEXP);
    rcpp_result_gen = Rcpp::wrap(Dijkstra_early_stop_path(gfrom, gto, gw, NbNodes, dep, arr, dict));
    return rcpp_result_gen;
END_RCPP
}
// Dijkstra_mat
Rcpp::NumericMatrix Dijkstra_mat(std::vector<int> gfrom, std::vector<int> gto, std::vector<float> gw, int NbNodes, std::vector<int> dep, std::vector<int> arr);
RcppExport SEXP _cppRouting_Dijkstra_mat(SEXP gfromSEXP, SEXP gtoSEXP, SEXP gwSEXP, SEXP NbNodesSEXP, SEXP depSEXP, SEXP arrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type gfrom(gfromSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type gto(gtoSEXP);
    Rcpp::traits::input_parameter< std::vector<float> >::type gw(gwSEXP);
    Rcpp::traits::input_parameter< int >::type NbNodes(NbNodesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type dep(depSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arr(arrSEXP);
    rcpp_result_gen = Rcpp::wrap(Dijkstra_mat(gfrom, gto, gw, NbNodes, dep, arr));
    return rcpp_result_gen;
END_RCPP
}
// Dijkstra_multi_path
Rcpp::List Dijkstra_multi_path(std::vector<int> gfrom, std::vector<int> gto, std::vector<float> gw, int NbNodes, std::vector<int> dep, std::vector<int> arr, std::vector<std::string> dict);
RcppExport SEXP _cppRouting_Dijkstra_multi_path(SEXP gfromSEXP, SEXP gtoSEXP, SEXP gwSEXP, SEXP NbNodesSEXP, SEXP depSEXP, SEXP arrSEXP, SEXP dictSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type gfrom(gfromSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type gto(gtoSEXP);
    Rcpp::traits::input_parameter< std::vector<float> >::type gw(gwSEXP);
    Rcpp::traits::input_parameter< int >::type NbNodes(NbNodesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type dep(depSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arr(arrSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dict(dictSEXP);
    rcpp_result_gen = Rcpp::wrap(Dijkstra_multi_path(gfrom, gto, gw, NbNodes, dep, arr, dict));
    return rcpp_result_gen;
END_RCPP
}
// Isochrone
Rcpp::List Isochrone(std::vector<int> gfrom, std::vector<int> gto, std::vector<float> gw, int NbNodes, std::vector<int> dep, float max_limit, std::vector<std::string> dict);
RcppExport SEXP _cppRouting_Isochrone(SEXP gfromSEXP, SEXP gtoSEXP, SEXP gwSEXP, SEXP NbNodesSEXP, SEXP depSEXP, SEXP max_limitSEXP, SEXP dictSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type gfrom(gfromSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type gto(gtoSEXP);
    Rcpp::traits::input_parameter< std::vector<float> >::type gw(gwSEXP);
    Rcpp::traits::input_parameter< int >::type NbNodes(NbNodesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type dep(depSEXP);
    Rcpp::traits::input_parameter< float >::type max_limit(max_limitSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dict(dictSEXP);
    rcpp_result_gen = Rcpp::wrap(Isochrone(gfrom, gto, gw, NbNodes, dep, max_limit, dict));
    return rcpp_result_gen;
END_RCPP
}
// Isochrone_multi
Rcpp::List Isochrone_multi(std::vector<int> gfrom, std::vector<int> gto, std::vector<float> gw, int NbNodes, std::vector<int> dep, std::vector<float> limit_vec, float max_limit, bool setdif, std::vector<std::string> dict);
RcppExport SEXP _cppRouting_Isochrone_multi(SEXP gfromSEXP, SEXP gtoSEXP, SEXP gwSEXP, SEXP NbNodesSEXP, SEXP depSEXP, SEXP limit_vecSEXP, SEXP max_limitSEXP, SEXP setdifSEXP, SEXP dictSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type gfrom(gfromSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type gto(gtoSEXP);
    Rcpp::traits::input_parameter< std::vector<float> >::type gw(gwSEXP);
    Rcpp::traits::input_parameter< int >::type NbNodes(NbNodesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type dep(depSEXP);
    Rcpp::traits::input_parameter< std::vector<float> >::type limit_vec(limit_vecSEXP);
    Rcpp::traits::input_parameter< float >::type max_limit(max_limitSEXP);
    Rcpp::traits::input_parameter< bool >::type setdif(setdifSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dict(dictSEXP);
    rcpp_result_gen = Rcpp::wrap(Isochrone_multi(gfrom, gto, gw, NbNodes, dep, limit_vec, max_limit, setdif, dict));
    return rcpp_result_gen;
END_RCPP
}
// Astar_par
Rcpp::NumericVector Astar_par(Rcpp::IntegerVector dep, Rcpp::IntegerVector arr, Rcpp::IntegerVector gfrom, Rcpp::IntegerVector gto, Rcpp::NumericVector gw, int NbNodes, Rcpp::NumericVector lat, Rcpp::NumericVector lon, float k);
RcppExport SEXP _cppRouting_Astar_par(SEXP depSEXP, SEXP arrSEXP, SEXP gfromSEXP, SEXP gtoSEXP, SEXP gwSEXP, SEXP NbNodesSEXP, SEXP latSEXP, SEXP lonSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type dep(depSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type arr(arrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type gfrom(gfromSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type gto(gtoSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type gw(gwSEXP);
    Rcpp::traits::input_parameter< int >::type NbNodes(NbNodesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lat(latSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lon(lonSEXP);
    Rcpp::traits::input_parameter< float >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(Astar_par(dep, arr, gfrom, gto, gw, NbNodes, lat, lon, k));
    return rcpp_result_gen;
END_RCPP
}
// Dijkstra_early_stop_par
Rcpp::NumericVector Dijkstra_early_stop_par(Rcpp::IntegerVector dep, Rcpp::IntegerVector arr, Rcpp::IntegerVector gfrom, Rcpp::IntegerVector gto, Rcpp::NumericVector gw, int NbNodes);
RcppExport SEXP _cppRouting_Dijkstra_early_stop_par(SEXP depSEXP, SEXP arrSEXP, SEXP gfromSEXP, SEXP gtoSEXP, SEXP gwSEXP, SEXP NbNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type dep(depSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type arr(arrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type gfrom(gfromSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type gto(gtoSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type gw(gwSEXP);
    Rcpp::traits::input_parameter< int >::type NbNodes(NbNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(Dijkstra_early_stop_par(dep, arr, gfrom, gto, gw, NbNodes));
    return rcpp_result_gen;
END_RCPP
}
// Dijkstra_mat_par
Rcpp::NumericMatrix Dijkstra_mat_par(Rcpp::IntegerVector gfrom, Rcpp::IntegerVector gto, Rcpp::NumericVector gw, int NbNodes, Rcpp::IntegerVector dep, Rcpp::IntegerVector arr);
RcppExport SEXP _cppRouting_Dijkstra_mat_par(SEXP gfromSEXP, SEXP gtoSEXP, SEXP gwSEXP, SEXP NbNodesSEXP, SEXP depSEXP, SEXP arrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type gfrom(gfromSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type gto(gtoSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type gw(gwSEXP);
    Rcpp::traits::input_parameter< int >::type NbNodes(NbNodesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type dep(depSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type arr(arrSEXP);
    rcpp_result_gen = Rcpp::wrap(Dijkstra_mat_par(gfrom, gto, gw, NbNodes, dep, arr));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cppRouting_Astar", (DL_FUNC) &_cppRouting_Astar, 9},
    {"_cppRouting_Astar_paths", (DL_FUNC) &_cppRouting_Astar_paths, 10},
    {"_cppRouting_Dijkstra_early_stop", (DL_FUNC) &_cppRouting_Dijkstra_early_stop, 6},
    {"_cppRouting_Dijkstra_early_stop_path", (DL_FUNC) &_cppRouting_Dijkstra_early_stop_path, 7},
    {"_cppRouting_Dijkstra_mat", (DL_FUNC) &_cppRouting_Dijkstra_mat, 6},
    {"_cppRouting_Dijkstra_multi_path", (DL_FUNC) &_cppRouting_Dijkstra_multi_path, 7},
    {"_cppRouting_Isochrone", (DL_FUNC) &_cppRouting_Isochrone, 7},
    {"_cppRouting_Isochrone_multi", (DL_FUNC) &_cppRouting_Isochrone_multi, 9},
    {"_cppRouting_Astar_par", (DL_FUNC) &_cppRouting_Astar_par, 9},
    {"_cppRouting_Dijkstra_early_stop_par", (DL_FUNC) &_cppRouting_Dijkstra_early_stop_par, 6},
    {"_cppRouting_Dijkstra_mat_par", (DL_FUNC) &_cppRouting_Dijkstra_mat_par, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_cppRouting(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
